apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId APPLICATION_ID
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode pkgCode() as int
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
//                includeCompileClasspath = true
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        ndk {
            abiFilters "armeabi",  "armeabi-v7a" , "arm64-v8a" , "x86"
//            abiFilters "armeabi-v7a" ,"arm64-v8a"
        }
    }

    signingConfigs {
        release {
            storeFile file(rootProject.ext.android.keyStorePath)
            // 这里去gradle.properties文件中将keystore路径改成自己的
            storePassword rootProject.ext.android.storePassword
            keyAlias rootProject.ext.android.keyAlias
            keyPassword rootProject.ext.android.keyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }

        debug {
            storeFile file(rootProject.ext.android.keyStorePath)
            // 这里去gradle.properties文件中将keystore路径改成自己的
            storePassword rootProject.ext.android.storePassword
            keyAlias rootProject.ext.android.keyAlias
            keyPassword rootProject.ext.android.keyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    flavorDimensions "default"

    productFlavors {
        // 正式环境
        production {
            manifestPlaceholders = [
                    app_name  : "@string/app_name",
            ]
        }
        // 开发环境
        development {
            manifestPlaceholders = [
                    app_name  : "@string/app_name_test",
            ]
        }

        // 批量打包
        android.applicationVariants.all { variant ->
            def flavorName = variant.flavorName
            variant.outputs.all {
                if (flavorName == 'production'){
                    outputFileName = "logisDriver_${defaultConfig.versionName}_双屏_${pkgCode()}.apk"
                }else if(flavorName == 'development'){
                    outputFileName = "logisDriver_${defaultConfig.versionName}_双屏测试_${pkgCode()}.apk"
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 批量打包
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "logisDriver_${defaultConfig.versionName}_${pkgTime()}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    //统一资源前缀，规范资源引用
    resourcePrefix "app_"
    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

static def pkgCode() {
    return new Date().format("yyyyMMddHH")
}

static def pkgTime() {
    return new Date().format("yyyy-MM-dd-HH")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //宿主项目中判断组件是否需要独立运行
    if (isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        //主业务模块
        implementation project(':module-main')
    }
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
}